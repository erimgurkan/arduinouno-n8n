#include <DHT.h>
#include <Adafruit_BMP280.h>
#include <BH1750.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include "DHT.h"

const char* ssid = "emirdeniz";
const char* password = "18811938";
const char* webhookUrl = "https://67uw0nft.rpcld.net/webhook/data/ardunio";

// Interval for sending data (2 hours in milliseconds)
const long interval = 2 * 60 * 60 * 1000;
long lastSendTime = 0;

// Define sensor pins and types
#define DHTPIN 2        // DHT11 Data pin
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);
Adafruit_BMP280 bmp;
BH1750 lightMeter;

// MQ-2 sensor analog pin
const int MQ2_PIN = A0;

void setup() {
  Serial.begin(115200);
  dht.begin();

  // Connect to Wi-Fi
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Initialize BMP280
  if (!bmp.begin()) {
    Serial.println("Could not find a valid BMP280 sensor, check wiring!");
    while (1);
  }

  // Initialize BH1750
  if (!lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE)) {
    Serial.println("Could not find a valid BH1750 sensor, check wiring!");
    while (1);
  }

  Serial.println("Environment Monitoring System Started");
}

void loop() {
  if (millis() - lastSendTime > interval) {
    lastSendTime = millis();

    // Read DHT11 data
    float h = dht.readHumidity();
    float t = dht.readTemperature();

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }

    // Read BMP280 data
    float pressure = bmp.readPressure() / 100.0F; // Pa to hPa

    // Read MQ-2 data
    int gas_value = analogRead(MQ2_PIN);

    // Read BH1750 data
    float lux = lightMeter.readLightLevel();

    // Create JSON object
    StaticJsonDocument<200> doc;
    doc["temperature"] = t;
    doc["humidity"] = h;
    doc["pressure"] = pressure;
    doc["gas"] = gas_value;
    doc["light"] = lux;

    String jsonOutput;
    serializeJson(doc, jsonOutput);

    // Send data to webhook
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      http.begin(webhookUrl);
      http.addHeader("Content-Type", "application/json");

      int httpResponseCode = http.POST(jsonOutput);

      if (httpResponseCode > 0) {
        Serial.printf("[HTTP] POST... code: %d\n", httpResponseCode);
        String response = http.getString();
        Serial.println(response);
      } else {
        Serial.printf("[HTTP] POST... failed, error: %s\n", http.errorToString(httpResponseCode).c_str());
      }
      http.end();
    } else {
      Serial.println("WiFi not connected, attempting to reconnect...");
      WiFi.begin(ssid, password);
      int attempts = 0;
      while (WiFi.status() != WL_CONNECTED && attempts < 20) { // Try to reconnect for 10 seconds
        delay(500);
        Serial.print(".");
        attempts++;
      }
      if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nWiFi reconnected.");
      } else {
        Serial.println("\nFailed to reconnect WiFi.");
      }
    }

    // Format and print data to Serial Port (for debugging)
    Serial.print("Temperature: "); Serial.print(t); Serial.println(" *C");
    Serial.print("Humidity: "); Serial.print(h); Serial.println(" %");
    Serial.print("Pressure: "); Serial.print(pressure); Serial.println(" hPa");
    Serial.print("Gas: "); Serial.println(gas_value);
    Serial.print("Light: "); Serial.print(lux); Serial.println(" lx");
  }
  delay(100); // Small delay to prevent watchdog timer issues
}
